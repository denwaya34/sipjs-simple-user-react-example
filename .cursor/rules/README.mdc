---
description:
globs:
alwaysApply: false
---
# SIP.js React プロジェクト Cursor Rules

このディレクトリには、SIP.js React TypeScriptプロジェクトの開発を支援するCursor AIルールが含まれています。

## ルール一覧

### 📁 プロジェクト構造
- **[sipjs-project-structure.mdc](mdc:.cursor/rules/sipjs-project-structure.mdc)**: プロジェクトの全体構造とファイル配置ルール

### ⚛️ React & TypeScript
- **[react-typescript-patterns.mdc](mdc:.cursor/rules/react-typescript-patterns.mdc)**: React TypeScriptの開発パターン
- **[modern-react-development.mdc](mdc:.cursor/rules/modern-react-development.mdc)**: React 19.1.0とTypeScript 5.8.3のモダン開発ガイド

### 🎨 UI & スタイリング
- **[daisyui.mdc](mdc:.cursor/rules/daisyui.mdc)**: daisyUI 5.0.43の完全ガイド
- **[vite-tailwind-config.mdc](mdc:.cursor/rules/vite-tailwind-config.mdc)**: Vite + Tailwind CSS設定

### 🔧 ビルド & 設定
- **[vite-build-optimization.mdc](mdc:.cursor/rules/vite-build-optimization.mdc)**: Vite 6.3.5のビルド最適化
- **[develop-rule.mdc](mdc:.cursor/rules/develop-rule.mdc)**: 開発ルールとベストプラクティス

### 📞 SIP.js 統合
- **[sipjs-development-guidelines.mdc](mdc:.cursor/rules/sipjs-development-guidelines.mdc)**: SIP.js 0.21.2の開発ガイドライン

## 主要技術スタック

### フロントエンド
- **React 19.1.0**: 最新のReactバージョン
- **TypeScript 5.8.3**: 厳密な型チェック
- **Vite 6.3.5**: 高速ビルドツール

### UI/UX
- **Tailwind CSS 4.1.8**: ユーティリティファーストCSS
- **daisyUI 5.0.43**: Tailwind CSSコンポーネントライブラリ
- **shadcn/ui**: モダンUIコンポーネント
- **Lucide React**: アイコンライブラリ

### 通信
- **SIP.js 0.21.2**: SIPプロトコル実装
- **WebRTC**: リアルタイム通信

### 開発ツール
- **pnpm**: 高速パッケージマネージャー
- **ESLint**: コード品質チェック
- **TypeScript**: 型安全性

## 開発ワークフロー

### 1. 環境セットアップ
```bash
# 依存関係のインストール
pnpm install

# 開発サーバー起動
pnpm dev
```

### 2. 開発プロセス
```bash
# 型チェック
pnpm build

# リント実行
pnpm lint

# プレビュー
pnpm preview
```

### 3. コード品質
- TypeScript厳密モード使用
- ESLint設定に従う
- React 19のベストプラクティス適用

## ファイル構造

```
sipjs-simple-user-react-example/
├── src/
│   ├── components/          # Reactコンポーネント
│   │   └── ui/             # shadcn/uiコンポーネント
│   ├── lib/                # ユーティリティ関数
│   ├── types/              # TypeScript型定義
│   ├── App.tsx            # メインアプリケーション
│   ├── main.tsx           # エントリーポイント
│   └── index.css          # グローバルスタイル
├── .cursor/rules/          # Cursor AIルール
├── components.json         # shadcn/ui設定
├── package.json           # プロジェクト設定
├── vite.config.ts         # Vite設定
└── tsconfig.*.json        # TypeScript設定
```

## 重要な設定ファイル

### TypeScript設定
- [tsconfig.json](mdc:tsconfig.json): ベース設定
- [tsconfig.app.json](mdc:tsconfig.app.json): アプリケーション用
- [tsconfig.node.json](mdc:tsconfig.node.json): Node.js用

### ビルド設定
- [vite.config.ts](mdc:vite.config.ts): Vite設定
- [package.json](mdc:package.json): 依存関係とスクリプト

### UI設定
- [components.json](mdc:components.json): shadcn/ui設定
- [src/index.css](mdc:src/index.css): Tailwind CSS + daisyUI

### 品質管理
- [eslint.config.js](mdc:eslint.config.js): ESLint設定
- [.editorconfig](mdc:.editorconfig): エディター設定

## 開発ガイドライン

### コンポーネント作成
1. **関数コンポーネント**のみ使用
2. **TypeScript**で厳密な型定義
3. **shadcn/ui**または**daisyUI**コンポーネント活用
4. **アクセシビリティ**を考慮

### SIP.js統合
1. **カスタムフック**でSIP機能をカプセル化
2. **型安全**なエラーハンドリング
3. **WebRTC**対応の設定
4. **リアルタイム通信**の最適化

### スタイリング
1. **Tailwind CSS**ユーティリティクラス優先
2. **daisyUI**コンポーネントクラス活用
3. **レスポンシブデザイン**対応
4. **ダークモード**サポート

### パフォーマンス
1. **React 19**の自動最適化活用
2. **Vite**の高速ビルド利用
3. **チャンク分割**でバンドルサイズ最適化
4. **遅延読み込み**で初期ロード高速化

## トラブルシューティング

### よくある問題
1. **TypeScriptパスエラー**: [vite-build-optimization.mdc](mdc:.cursor/rules/vite-build-optimization.mdc) 参照
2. **SIP.js接続エラー**: [sipjs-development-guidelines.mdc](mdc:.cursor/rules/sipjs-development-guidelines.mdc) 参照
3. **Tailwind CSS未適用**: [daisyui.mdc](mdc:.cursor/rules/daisyui.mdc) 参照
4. **ビルドエラー**: [vite-build-optimization.mdc](mdc:.cursor/rules/vite-build-optimization.mdc) 参照

### サポートリソース
- **React 19 ドキュメント**: https://react.dev/
- **TypeScript ハンドブック**: https://www.typescriptlang.org/docs/
- **Vite ガイド**: https://vitejs.dev/guide/
- **SIP.js ドキュメント**: https://sipjs.com/
- **Tailwind CSS**: https://tailwindcss.com/
- **daisyUI**: https://daisyui.com/

## 更新履歴

- **2024-12**: 初期Cursor Rules作成
  - プロジェクト構造ガイド
  - モダンReact開発ガイドライン
  - Viteビルド最適化ガイド
  - daisyUI完全ガイド統合

## 貢献ガイド

新しいルールの追加や既存ルールの改善は、以下の形式で行ってください：

1. **ファイル名**: `kebab-case.mdc`
2. **構造**: マークダウン形式
3. **参照**: `[filename.ext](mdc:filename.ext)` 形式
4. **言語**: 日本語（コメント・説明）、英語（コード例）
